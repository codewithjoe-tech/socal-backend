name: Deploy Django App to Hostinger VM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout your code
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Set up Python (for possible pip caching or script support)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 3. Create .env file from secrets
      - name: Create .env File
        run: |
          cat <<EOF > .env
          AZURE_ACCOUNT_KEY=${{ secrets.AZURE_ACCOUNT_KEY }}
          AZURE_ACCOUNT_NAME=${{ secrets.AZURE_ACCOUNT_NAME }}
          AZURE_MEDIA_CONTAINER=${{ secrets.AZURE_MEDIA_CONTAINER }}
          AZURE_STATIC_CONTAINER=${{ secrets.AZURE_STATIC_CONTAINER }}
          CELERY_BROKER_URL=redis://redis:6379/0
          CELERY_RESULT_BACKEND=redis://redis:6379/0
          DB_HOST=postgres
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=5432
          DEBUG=${{ secrets.DEBUG }}
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          FRONT_END=${{ secrets.FRONT_END }}
          AZURE_CONNECTION_STRING=${{ secrets.AZURE_CONNECTION_STRING }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          EOF

      # 4. Log in to Docker Hub
      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. Build and push Docker images
      - name: Build and Push Docker Images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest --build-arg SERVICE=web .
          docker push ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest

          docker build -t ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest --build-arg SERVICE=celery .
          docker push ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest

      # 6. Deploy to Hostinger VM via SSH
      - name: Deploy to Hostinger VM
        env:
          VM_IP: ${{ secrets.VM_IP }}
          VM_USER: root
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass

          echo "Uploading .env file..."
          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no .env $VM_USER@$VM_IP:/root/.env

          echo "Connecting to VM and deploying services..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $VM_USER@$VM_IP << 'EOF'
            set -e

            echo "Preparing environment..."
            mkdir -p /var/www/friendbook/media /var/lib/postgresql/data
            chmod -R 775 /var/www/friendbook/media
            chmod -R 700 /var/lib/postgresql/data
            chown -R root:root /var/www/friendbook/media
            chown -R 999:999 /var/lib/postgresql/data

            echo "Logging into Docker..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            echo "Stopping and removing old containers..."
            docker rm -f friendbook_web friendbook_celery redis postgres || true

            echo "Cleaning up Docker system..."
            docker system prune -af || true
            docker volume prune -f || true

            echo "Removing stale Redis volume..."
            docker volume rm redis_data || true

            echo "Creating Docker network..."
            docker network create friendbook-network || true

            echo "Pulling latest Docker images..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest

            echo "Starting PostgreSQL container..."
            docker run -d --name postgres \
              --network friendbook-network \
              --restart unless-stopped \
              -e POSTGRES_USER=${{ secrets.DB_USER }} \
              -e POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e POSTGRES_DB=${{ secrets.DB_NAME }} \
              -v /var/lib/postgresql/data:/var/lib/postgresql/data \
              postgres:13

            # Stop and remove the old Redis container
            docker rm -f redis
            
            # Start Redis without the broken config path
            docker run -d --name redis \
              --network friendbook-network \
              --restart unless-stopped \
              -p 6379:6379 \
              --health-cmd="redis-cli ping" \
              --health-interval=10s \
              --health-timeout=5s \
              --health-retries=3 \
              redis:alpine redis-server --appendonly yes



            echo "Starting Django container..."
            docker run -d --name friendbook_web \
              --network friendbook-network \
              --restart unless-stopped \
              -p 8000:8000 \
              -v /var/www/friendbook/media:/app/media \
              --env-file /root/.env \
              ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest

            echo "Applying Django migrations..."
            docker exec friendbook_web python manage.py migrate

            echo "Starting Celery worker container..."
            docker run -d --name friendbook_celery \
              --network friendbook-network \
              --restart on-failure \
              -v /var/www/friendbook/media:/app/media \
              --env-file /root/.env \
              ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest \
              celery -A mysite worker --loglevel=info

            echo "Deployment complete. Active containers:"
            docker ps -a
          EOF

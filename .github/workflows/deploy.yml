name: Deploy Django App to Azure VM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

     
      - name: Create .env File from Secrets
        run: |
          echo "AZURE_ACCOUNT_KEY=${{ secrets.AZURE_ACCOUNT_KEY }}" > .env
          echo "AZURE_ACCOUNT_NAME=${{ secrets.AZURE_ACCOUNT_NAME }}" >> .env
          echo "AZURE_MEDIA_CONTAINER=${{ secrets.AZURE_MEDIA_CONTAINER }}" >> .env
          echo "AZURE_STATIC_CONTAINER=${{ secrets.AZURE_STATIC_CONTAINER }}" >> .env
          echo "CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}" >> .env
          echo "CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "FRONT_END=${{ secrets.FRONT_END }}" >> .env
          echo "AZURE_CONNECTION_STRING=${{ secrets.AZURE_CONNECTION_STRING }}" >> .env

      # Docker login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and Push Docker Images
      - name: Build and Push Docker Images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest --build-arg SERVICE=web .
          docker push ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest
          docker build -t ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest --build-arg SERVICE=celery .
          docker push ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest

      # Deploy to Azure VM using Docker Run
      - name: Deploy to Hostinger VPS
        env:
          VM_KEY: ${{ secrets.VM_KEY }}
          VM_KEY_PASSPHRASE: ${{ secrets.VM_KEY_PASSPHRASE }}
          VM_IP: ${{ secrets.VM_IP }}
          VM_USER: root
        run: |
          echo "$VM_KEY" > hostinger_key.pem
          chmod 600 hostinger_key.pem

          # Use SSH agent with passphrase
          eval "$(ssh-agent -s)"
          echo "$VM_KEY_PASSPHRASE" | SSH_ASKPASS=/bin/echo ssh-add hostinger_key.pem

          scp -o StrictHostKeyChecking=no -i hostinger_key.pem .env "$VM_USER@$VM_IP:/root/.env"

          ssh -o StrictHostKeyChecking=no -i hostinger_key.pem "$VM_USER@$VM_IP" << EOF
            set -e
            echo "Deploying Django app as root..."

            # Docker login and run containers here
            docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            docker pull ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest

            docker network create friendbook-network || true

            docker rm -f friendbook_web friendbook_celery redis || true
            docker run -d --name redis --network friendbook-network -p 6379:6379 redis:alpine

            docker run -d --name friendbook_web \
              --network friendbook-network \
              -p 8000:8000 \
              --env-file /root/.env \
              ${{ secrets.DOCKER_USERNAME }}/friendbook_web:latest

            docker run -d --name friendbook_celery \
              --network friendbook-network \
              --env-file /root/.env \
              ${{ secrets.DOCKER_USERNAME }}/friendbook_celery:latest \
              celery -A mysite worker --loglevel=info

            echo "Deployment completed!"
          EOF
